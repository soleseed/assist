package hansuo.trainArrival.websocket;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.atomic.AtomicInteger;

import javax.servlet.http.HttpSession;
import javax.websocket.EndpointConfig;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import org.springframework.stereotype.Component;

import hansuo.trainArrival.entity.WebUser;
import hansuo.trainArrival.interceptor.WebSecurityConfig;

@ServerEndpoint(value = "/websocket", configurator = HttpSessionConfigurator.class)
@Component
public class WebSocket {

	// 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。
	private static final AtomicInteger con = new AtomicInteger(0);

	// concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。
	private static final CopyOnWriteArraySet<WebSocket> webSocketSet = new CopyOnWriteArraySet<WebSocket>();

	private static final ConcurrentHashMap<String, WebSocket> websocketMap = new ConcurrentHashMap<String, WebSocket>();

	// 与某个客户端的连接会话，需要通过它来给客户端发送数据
	private Session session;

	/**
	 * 连接建立成功调用的方法
	 */
	@OnOpen
	public void onOpen(Session session, EndpointConfig config) {
		this.session = session;
		HttpSession httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());
		WebUser user = (WebUser) httpSession.getAttribute(WebSecurityConfig.SESSION_KEY);
		websocketMap.put(user.getUserName(), this);
		// webSocketSet.add(this); // 加入set中
		con.getAndIncrement(); // 在线数加1
		System.out.println("新用户[" + user.getUserName() + "]加入！当前在线人数为" + con.get());
	}

	/**
	 * 连接关闭调用的方法
	 */
	@OnClose
	public void onClose() {
		webSocketSet.remove(this); // 从set中删除
		con.decrementAndGet(); // 在线数减1
		System.out.println("有一连接关闭！当前在线人数为" + con.get());
	}

	/**
	 * 收到客户端消息后调用的方法
	 *
	 * @param message 客户端发送过来的消息
	 */
	@OnMessage
	public void onMessage(String message, Session session) {
		System.out.println("来自客户端的消息:" + message);
		// 群发消息
		for (WebSocket item : webSocketSet) {
			try {
				item.sendMessage(message);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 发生错误时调用
	 * 
	 */
	@OnError
	public void onError(Session session, Throwable error) {
		// System.out.println("发生错误");
		// error.printStackTrace();
	}

	// 群发自定义消息
	public static void sendInfo(String message) throws IOException {
		for (Map.Entry<String, WebSocket> entry : websocketMap.entrySet()) {
			try {
				String user = entry.getKey();
				WebSocket webSocket = entry.getValue();
				webSocket.sendMessage(message);
			} catch (IOException e) {
				continue;
			}
		}
	}

	// 发给指定用户
	public static void sendInfo(String user, String message) throws IOException {
		for (Map.Entry<String, WebSocket> entry : websocketMap.entrySet()) {
			try {
				WebSocket webSocket = entry.getValue();
				if (user.equals(entry.getKey())) {
					webSocket.sendMessage(message);
					System.out.println("给用户[" + user + "]发送信息" + message);
				}
			} catch (IOException e) {
				continue;
			}
		}
	}

	// 发给指定用户组
	public static void sendInfo(List<String> users, String message) throws IOException {
		for (Map.Entry<String, WebSocket> entry : websocketMap.entrySet()) {
			try {
				WebSocket webSocket = entry.getValue();
				if (users.contains(entry.getKey())) {
					webSocket.sendMessage(message);
				}
			} catch (IOException e) {
				continue;
			}
		}
	}

	public void sendMessage(String message) throws IOException {
		this.session.getBasicRemote().sendText(message);
	}
}
